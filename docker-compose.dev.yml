services:
  caddy:
    build:
      context: ./caddy
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    environment:
      DEBUG: True
      DOMAIN_NAME: ${DOMAIN_NAME}
      EMAIL: ${EMAIL}
    volumes:
      - ./caddy/Caddyfile.dev:/etc/caddy/Caddyfile
      - /caddy/data:/data
      - /caddy/config:/config
    depends_on:
      - fastapi
    networks:
      - backend

  fastapi:
    build: .
    container_name: fastapi_app
    command: sh -c "
            alembic upgrade head
            && python3 -m app.init_data"
    environment:
      DEBUG: True
      DATABASE_HOST: postgres
      REDIS_HOST: redis
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      CORS_ORIGINS: ${CORS_ORIGINS}
    volumes:
      - ./uvicorn_logging.yml:/fastapi_project/uvicorn_logging.yml:ro
    depends_on:
      - postgres
      - redis
      - celery_worker
      - celery_beat
    networks:
      - backend

  postgres:
    image: postgres:17.4
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 2s
      retries: 10
    networks:
      - backend

  redis:
    image: redis:7.4
    container_name: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  celery_worker:
    build: .
    container_name: celery_worker
    entrypoint: ""
    command: celery -A app.tasks.celery:celery_app worker --loglevel=DEBUG -Q default,celery
    volumes:
      - ./geoip:/fastapi_project/geoip
    environment:
      DATABASE_HOST: postgres
      REDIS_HOST: redis
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      - redis
    networks:
      - backend

  celery_beat:
    build: .
    container_name: celery_beat
    entrypoint: ""
    command: celery -A app.tasks.celery:celery_app beat --loglevel=DEBUG
    environment:
      REDIS_HOST: redis
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      - redis
    networks:
      - backend

  flower:
    build: .
    container_name: celery_flower
    entrypoint: ""
    command: celery -A app.tasks.celery:celery_app flower --port=9800
    environment:
      REDIS_HOST: redis
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      - redis
    networks:
      - backend

  prometheus:
    image: prom/prometheus:v3.4.0
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - backend

  grafana:
    image: grafana/grafana:12.0.0
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_LOGIN}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: False
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - backend

volumes:
  postgres_data:
  grafana_data:

networks:
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.0.0/16
          gateway: 10.10.0.1
